name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      HARVEST_ACCESS_TOKEN: dummy_harvest_access_token
      HARVEST_ACCOUNT_ID: dummy_harvest_account_id
      HUBSPOT_API_KEY: dummy_hubspot_api_key
      MS_TENANT_ID: dummy_ms_tenant_id
      MS_CLIENT_ID: dummy_ms_client_id
      MS_CLIENT_SECRET: dummy_ms_client_secret

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones disabled for SonarQube

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Test Database
        run: |
          npm run migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type checking
        run: npm run typecheck

      - name: Run unit tests
        run: npm test -- --coverage --passWithNoTests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage

      - name: SonarQube Scan
        continue-on-error: true
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

      - name: Build API
        run: npm run build:api # compiles Express API to dist for deployment
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Upload API build artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-dist
          path: dist

      - name: Build application for Lighthouse
        run: npm run build
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

  lighthouse:
    runs-on: ubuntu-latest
    needs: ci
    continue-on-error: true
    env:
      HARVEST_ACCESS_TOKEN: dummy_harvest_access_token
      HARVEST_ACCOUNT_ID: dummy_harvest_account_id
      HUBSPOT_API_KEY: dummy_hubspot_api_key
      MS_TENANT_ID: dummy_ms_tenant_id
      MS_CLIENT_ID: dummy_ms_client_id
      MS_CLIENT_SECRET: dummy_ms_client_secret

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application for Lighthouse
        run: npm run build

      - name: Run Lighthouse CI
        continue-on-error: true
        run: npx lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci
        if: always()


#  Security Audit (Snyk step disabled until credentials are configured)
#  security:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Run npm audit
#        run: npm audit --audit-level=moderate
#
#      # - name: Run Snyk Security Test
#      #   uses: snyk/actions/node@master
#      #   env:
#      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#      #   with:
#      #     args: --severity-threshold=high
